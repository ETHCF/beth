// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import { Test } from "forge-std/Test.sol";
import { BETH } from "src/BETH.sol";
import { ExploitForceETH } from "test/utils/ExploitForceETH.sol";

/// @notice Documents the EVM limitation: ETH can be force-sent to contracts via selfdestruct.
/// Such ETH is not minted by BETH and remains trapped until flushed. Legit deposits never consume it.
contract BETHForceExploitTest is Test {
    BETH internal beth;
    address internal constant BURN = address(0x0000000000000000000000000000000000000000);

    function setUp() public {
        beth = new BETH();
    }

    function test_ForcedEtherThenFlush() public {
        // 1) Deploy ExploitForceETH and force-send 1 ETH to BETH via selfdestruct
        ExploitForceETH ex = new ExploitForceETH();
        deal(address(ex), 1 ether);
        ex.boom(address(beth));

        // Confirm balance increased without minting
        uint256 tb0 = beth.totalBurned();
        uint256 ts0 = beth.totalSupply();
        assertEq(address(beth).balance, 1 ether);
        assertEq(beth.totalBurned(), tb0);
        assertEq(beth.totalSupply(), ts0);

        // 2) Legit deposit should not affect the previously forced balance
        address user = address(0x1234);
        vm.deal(user, 2 ether);
        uint256 burnBefore = BURN.balance;
        vm.prank(user);
        beth.deposit{ value: 2 ether }();
        assertEq(BURN.balance, burnBefore + 2 ether);
        assertEq(address(beth).balance, 1 ether);

        // 3) flush clears forced ETH and adds to totalBurned
        uint256 tb1 = beth.totalBurned();
        beth.flush();
        assertEq(address(beth).balance, 0);
        assertEq(beth.totalBurned(), tb1 + 1 ether);
    }
}
